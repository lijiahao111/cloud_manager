package cn.wq.security.config;import cn.wq.security.detail.PersonDetail;import lombok.RequiredArgsConstructor;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.core.AuthenticationException;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.AuthenticationEntryPoint;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;/** * @author chenchao * @Data 2023/3/27 15:52 **/@Configuration@RequiredArgsConstructorpublic class SecurityConfig extends WebSecurityConfigurerAdapter {    @Override    protected void configure(HttpSecurity http) throws Exception {        http.formLogin()                .permitAll();        //给某个路径 需要有 admin的角色菜名才能访问//        http.authorizeRequests()//                .mvcMatchers("/indx").hasRole("ROLE_USER");        http.authorizeRequests()                .mvcMatchers("/doc.html").permitAll();        http.authorizeRequests().anyRequest().authenticated();        //异常的处理        http.exceptionHandling()                .authenticationEntryPoint(new AuthenticationEntryPoint() {                    @Override                    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {                        PrintWriter writer = response.getWriter();                        String requestURI = request.getRequestURI();                        writer.write("{code:403,msg:'无权访问'}"+requestURI);                        writer.flush();                        writer.close();                    }                });     //   super.configure(http);    }    private final PasswordEncoder passwordEncoder;   private final PersonDetail personDetail;    @Override    protected void configure(AuthenticationManagerBuilder auth) throws Exception {      //  String password="123456";       // auth.inMemoryAuthentication().withUser("ll").password(encode).roles("admin");        super.configure(auth);    }}